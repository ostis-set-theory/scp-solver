scp_program -> proc_test_apply_rule_new (*
	
	-> rrel_params: ... (*

		// процедура применения правила вывода
		// константный контур, для которого применяется правило 
		-> rrel_1: rrel_in: _binary_tree_input_identity;;

		// левая часть правила вывода в виде бинарного дерева
		-> rrel_2: rrel_in: _contour_rule1;;

		// правая часть правила вывода в виде бинарного дерева
		-> rrel_3: rrel_in: _contour_rule2;;

		// выходной контур, является элементом данного множества
		-> rrel_4: rrel_in: _el_binary_tree_output_identity;;
	*);;

	-> rrel_operators: ...(*

		-> rrel_init: ..print1 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Применение правила вывода. Вход];;
			=> nrel_goto: ..print_contour_1;;
		*);;

		-> ..print_contour_1 (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_print_system_idtf;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _contour_rule1;;	
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=> nrel_goto: ..print_contour_2;;
		*);;

		-> ..print_contour_2 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=> nrel_goto: .proc_test_apply_rule_new_9_print;;
		*);;
// ==================================================================

		-> .proc_test_apply_rule_new_9_print (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Поиск сущностей являющихся элементами как левой и так и правой части правила:];;
			=> nrel_goto: .proc_test_apply_rule_new_11;;
		*);;

		// множество сущностей которые принадлежат обеим контурам в правиле
		-> .proc_test_apply_rule_new_11 (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _set_entity;;
			=> nrel_goto: .proc_test_apply_rule_new_12;;
		*);;

		// формируем только переменные сущности никаких других нам не надо
		-> .proc_test_apply_rule_new_12 (*
			<- searchSetStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _contour_rule2;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: rrel_var: _els;;
			
				-> rrel_set_3: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _el_var;;

			=> nrel_goto: .proc_test_apply_rule_new_12A;;
		*);;

// ==============================================================
		// выбираем сущности, которые есть в обеих частях контура
		-> .proc_test_apply_rule_new_12A (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _el_var;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _entity;;
			=> nrel_then: .proc_test_apply_rule_new_12B;;
			=> nrel_else: ..print_sea;;
		*);;

		-> .proc_test_apply_rule_new_12B (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _arc;;
			=> nrel_goto: .proc_test_apply_rule_new_12C;;
		*);;

		-> .proc_test_apply_rule_new_12C (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _contour_rule1;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _entity;;
			=> nrel_then: .proc_test_apply_rule_new_12C1;;
			=> nrel_else: .proc_test_apply_rule_new_12A;;
		*);;

		-> .proc_test_apply_rule_new_12C1 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _set_entity;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _entity;;
			=> nrel_goto: .proc_test_apply_rule_new_12A;;
		*);;



// ===============================================================
		-> ..print_sea (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Перед поиском по ОБРАЗЦУ];;
			=> nrel_goto: .proc_test_apply_rule_new_12E4;;
		*);;

		-> .proc_test_apply_rule_new_12E4 (*
			<- sys_search;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _contour_rule1;;
			-> rrel_2: rrel_assign: rrel_scp_var: _for_sys_search;;
			-> rrel_3: rrel_fixed: rrel_scp_const: ...;;
			-> rrel_4: rrel_fixed: rrel_scp_const: ...;;
			=> nrel_then: ..print_sea2;;
			=> nrel_else: ..print_error;;
		*);;

		-> ..print_sea2 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [ПОСЛЕ поиском по ОБРАЗЦУ];;
			=> nrel_goto: .proc_test_apply_rule_new_14A;;
		*);;

// поиск одного из отношений рисунок 3 25
// ===========================================================
// ОБХОДИМ ВСЕ ОТНОШЕНИЯ ДЛЯ ФОРМИРОВАНИЯ НЕСКОЛЬКИХ ГЕНЕРАЦИЙ

		-> .proc_test_apply_rule_new_14A (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _for_sys_search;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _nrel;;
			=> nrel_then: ..print_sea3;;
			=> nrel_else: .proc_test_apply_rule_new_18;;
		*);;

		-> ..print_sea3 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [ПОСЛЕ for_sys_search];;
			=> nrel_goto: .proc_test_apply_rule_new_14B;;
		*);;

		-> .proc_test_apply_rule_new_14B (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _arc;;
			=> nrel_goto: .proc_test_apply_rule_new_14CC;;
		*);;

		// СОЗДАЕМ КОНТУР ПОЛУЧЕННЫЙ НА ВЫХОДЕ ПОСЛЕ ПРИМЕНЕНИЯ ПРАВИЛА
		// И СРАЗУ ЖЕ ДОБАВЛЯЕМ ЕГО В ОТВЕТ
		-> .proc_test_apply_rule_new_14CC (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _el_binary_tree_output_identity;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: rrel_node: rrel_const: rrel_struct: _binary_tree_output_identity;;
			=> nrel_goto: .proc_test_apply_rule_new_14Cfuiwefuw;;
		*);;

		// ========================================
		-> .proc_test_apply_rule_new_14Cfuiwefuw (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_test_apply_rule;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _nrel;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _binary_tree_output_identity;;			
				-> rrel_3: rrel_fixed: rrel_scp_var: _binary_tree_input_identity;;	
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_test_apply_rule_new_14Cfuiwefuw1;;
		*);;

		-> .proc_test_apply_rule_new_14Cfuiwefuw1 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_test_apply_rule_new_14C;;
		*);;
		// ============================================


		// СОЗДАНИЕ МНОЖЕСТВА, КОТОРОЕ ЯВЛЯЕТСЯ 3-ИМ ПАРАМЕТРОМ SYS_GEN
		-> .proc_test_apply_rule_new_14C (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _for_sys_gen;;
			=> nrel_goto: .proc_test_apply_rule_new_14C1;;
		*);;

		// ПЕРЕПИСЫВАЕМ ЛИСТЫ В НОВОЕ МНОЖЕСТВО
		-> .proc_test_apply_rule_new_14C1 (*
			<- searchSetStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _set_entity;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _entity_var;;
				
				-> rrel_set_3: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _set_entity_new;;

			=> nrel_goto: .proc_test_apply_rule_new_14D1;;
		*);;

		-> .proc_test_apply_rule_new_14D1 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _set_entity_new;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _entity_var;;
			=> nrel_then: .proc_test_apply_rule_new_14D2;;
			=> nrel_else: .proc_test_apply_rule_new_14K;;
		*);;

		-> .proc_test_apply_rule_new_14D2 (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _arc;;
			=> nrel_goto: .proc_test_apply_rule_new_14D3;;
		*);;

		// ПОЛУЧАЕМ ПЕРЕМЕННУЮ И КОНСТАНТНУЮ СУЩНОСТЬ
		-> .proc_test_apply_rule_new_14D3 (*
			<- searchElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _entity_var;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_common: rrel_const: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _entity_const;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_var: _nrel;;
			=> nrel_goto: .proc_test_apply_rule_new_14E;;
		*);;

		-> .proc_test_apply_rule_new_14E (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _arc2;;
			=> nrel_goto: .proc_test_apply_rule_new_14FA;;
		*);;

		-> .proc_test_apply_rule_new_14FA (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Переменная и ее значение:];;
			=> nrel_goto: .proc_test_apply_rule_new_14FB;;
		*);;

		-> .proc_test_apply_rule_new_14FB (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_print_system_idtf;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _entity_var;;	
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=> nrel_goto: .proc_test_apply_rule_new_14FC;;
		*);;

		-> .proc_test_apply_rule_new_14FC (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=> nrel_goto: .proc_test_apply_rule_new_14FD;;
		*);;

		-> .proc_test_apply_rule_new_14FD (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_print_system_idtf;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _entity_const;;	
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=> nrel_goto: .proc_test_apply_rule_new_14FE;;
		*);;

		-> .proc_test_apply_rule_new_14FE (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=> nrel_goto: .proc_test_apply_rule_new_14FF;;
		*);;

		// ДОБАВЛЯЕМ НАЙДЕННЫЙ ЛИСТ В ОТВЕТ
		-> .proc_test_apply_rule_new_14FF (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _binary_tree_output_identity;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _entity_const;;
			=> nrel_goto: .proc_test_apply_rule_new_14F;;
		*);;

		-> .proc_test_apply_rule_new_14F (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _for_sys_gen;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _node_temp;;
			=> nrel_goto: .proc_test_apply_rule_new_14G;;
		*);;

		-> .proc_test_apply_rule_new_14G (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _node_temp;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc_G;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _entity_var;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_1;;
			=> nrel_goto: .proc_test_apply_rule_new_14H;;
		*);;

		-> .proc_test_apply_rule_new_14H (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _node_temp;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc_H;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _entity_const;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_2;;
			=> nrel_goto: .proc_test_apply_rule_new_14I;;
		*);;

		-> .proc_test_apply_rule_new_14I (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_const: rrel_fixed;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _arc_G;;
			=> nrel_goto: .proc_test_apply_rule_new_14J;;
		*);;

		-> .proc_test_apply_rule_new_14J (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_const: rrel_fixed;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _arc_H;;
			=> nrel_goto: .proc_test_apply_rule_new_14D1;;
		*);;

		-> .proc_test_apply_rule_new_14K (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _set_entity_new;;
			=> nrel_goto: .proc_test_apply_rule_new_15A;;
		*);;

		// ГЕНЕРАЦИЯ ПО ОБРАЗЦУ
		-> .proc_test_apply_rule_new_15A (*
			<- sys_gen;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _contour_rule2;;
			-> rrel_2: rrel_assign: rrel_scp_var: _base2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _for_sys_gen;;
			=> nrel_goto: .proc_test_apply_rule_new_16B;;
		*);;

		// ПЕРЕПИСЫВАЕМ КОНСТАНТНЫЕ УЗЛЫ ВО ВТОРОМ КОНТУРЕ ПРАВИЛА
		/*-> .proc_test_apply_rule_new_16A (*
			<- searchSetStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _contour_rule2;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc5;;
			-> rrel_3: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _els;;

				-> rrel_set_3: rrel_fixed: rrel_scp_var: _binary_tree_output_identity;;

			=> nrel_goto: .proc_test_apply_rule_new_16B;;
		*);;*/

		// ПЕРЕПИСЫВАЕМ РЕЗУЛЬТАТ ГЕНЕРАЦИИ ПО ОБРАЗЦУ
		-> .proc_test_apply_rule_new_16B (*
			<- searchSetStr5;;
			-> rrel_1: rrel_assign: rrel_scp_var: _entity_vars;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_common: rrel_const: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _entity_consts;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_var: _base2;;

				-> rrel_set_3: rrel_fixed: rrel_scp_var: _binary_tree_output_identity;;

			=> nrel_goto: .proc_test_apply_rule_new_17A;;
		*);;

// =============================================================
		// ПЕРЕПИСЫВАЕМ СУЩНОСТИ КОТОРЫЕ НЕ НАШЛИ, 
		// ПРИМЕНЯЯ ПОИСК ПО ОБРАЗЦУ ДЛЯ КОНТУРА ПЕРВОГО ПРАВИЛА
		/*-> .proc_test_apply_rule_new_16B (*
			<- searchSetStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _contour_rule1;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _entitys;;

				-> rrel_set_3: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _set_els;;

			=> nrel_goto: .proc_test_apply_rule_new_17A;;
		*);;

		-> .proc_test_apply_rule_new_16B (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _set_els;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _entity;;
			=> nrel_then: .proc_test_apply_rule_new_17A;;
			=> nrel_else: .proc_test_apply_rule_new_17A;;
		*);;

_base2
		-> .proc_test_apply_rule_new_16B (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _set_els;;
			=> nrel_goto: .proc_test_apply_rule_new_17A;;
		*);;

		-> .proc_test_apply_rule_new_16B (*
			<- searchElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _set_els;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _entity;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _base2;;
			=> nrel_then: .proc_test_apply_rule_new_17A;;
			=> nrel_else: .proc_test_apply_rule_new_17A;;
		*);;*/
// =============================================================
		
		// ИТОГОВЫЙ КОНТУР
		-> .proc_test_apply_rule_new_17A (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Правило вывода, полученный контур:];;
			=> nrel_goto: .proc_test_apply_rule_new_17B;;
		*);;

		-> .proc_test_apply_rule_new_17B (*
			<- printEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _binary_tree_output_identity;;
			=> nrel_goto: .proc_test_apply_rule_new_14A;;
		*);;

		-> .proc_test_apply_rule_new_18 (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _set_entity;;
			=> nrel_goto: ..print_finish1;;
		*);;

		-> ..print_finish1 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Применение правила вывода. Выход];;
			=> nrel_goto: ..print_finish2;;
	   	*);;

	   	-> ..print_finish2 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [================================];;
			=> nrel_goto: .proc_test_apply_rule_new_return;;
	   	*);;

	   	-> ..print_error (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Правила вывода не применено];;
			=> nrel_goto: .proc_test_apply_rule_new_return;;
	   	*);;

		-> .proc_test_apply_rule_new_return (*
			<- return;;
		*);;
	*);;
*);;