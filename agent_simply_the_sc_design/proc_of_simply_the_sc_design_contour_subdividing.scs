scp_program -> proc_of_simply_the_sc_design_contour_subdividing (*	
	
	-> rrel_params: ...(*
		-> rrel_1: rrel_in: _state;;
		-> rrel_2: rrel_in: _contour;;
		-> rrel_3: rrel_in: _root;;
		-> rrel_4: rrel_out: rrel_assign: rrel_scp_var: _tree;;
	*);;

	-> rrel_operators: ...(*
		
		-> rrel_init: ..print1 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Процедура формирования бинарного дерева. Вход];;
			=> nrel_goto: .proc_of_simply_the_sc_design_contour_subdividing_A1;;
	   	*);;

		-> .proc_of_simply_the_sc_design_contour_subdividing_A1 (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_of_simply_the_sc_added_constant_in_tree;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _contour;;
				-> rrel_2: rrel_assign: rrel_scp_var: _tree;;
				-> rrel_3: rrel_assign: rrel_scp_var: _left;;
				-> rrel_4: rrel_assign: rrel_scp_var: _right;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=> nrel_goto: .proc_of_simply_the_sc_design_contour_subdividing_A2;;
		*);;

		-> .proc_of_simply_the_sc_design_contour_subdividing_A2 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=> nrel_goto: .proc_of_simply_the_sc_design_contour_subdividing_A9;;
		*);;

		-> .proc_of_simply_the_sc_design_contour_subdividing_A9 (*
			<- searchSetStr5;;
			-> rrel_1: rrel_assign: rrel_scp_var: _els;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_common: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _root;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_var: _contour;;

				-> rrel_set_1: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _flags;;

			=> nrel_goto: .proc_of_simply_the_sc_design_contour_subdividing_A10;;
		*);;

		-> .proc_of_simply_the_sc_design_contour_subdividing_A10 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _flags;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _flag;;
			=> nrel_then: .proc_of_simply_the_sc_design_contour_subdividing_A10A;;
			=> nrel_else: ..print3;;
		*);;

		-> .proc_of_simply_the_sc_design_contour_subdividing_A10A (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _arc;;
			=> nrel_goto: .proc_of_simply_the_sc_design_contour_subdividing_A11;;
		*);;

		-> .proc_of_simply_the_sc_design_contour_subdividing_A11 (*
			<- call;; 
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_of_simply_the_sc_design_kv;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				// контур тождества
				-> rrel_1: rrel_fixed: rrel_scp_var: _contour;;
				// корень в тождестве
				-> rrel_2: rrel_fixed: rrel_scp_var: _root;;
				// контур дерева
				-> rrel_3: rrel_fixed: rrel_scp_var: _tree;;
				// левая ветвь дерева
				-> rrel_4: rrel_fixed: rrel_scp_var: _left;;
				// если flag содержит контантный узел, то там ничего нет,
				// если переменный, то там квазибинарная связка
				-> rrel_5: rrel_fixed: rrel_scp_var: _flag;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=> nrel_goto: .proc_of_simply_the_sc_design_contour_subdividing_A12;;
		*);;

		-> .proc_of_simply_the_sc_design_contour_subdividing_A12 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=> nrel_goto: .proc_of_simply_the_sc_design_contour_subdividing_A13;;
		*);;

		-> .proc_of_simply_the_sc_design_contour_subdividing_A13 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _flags;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _flag;;
			=> nrel_then: .proc_of_simply_the_sc_design_contour_subdividing_A13A;;
			=> nrel_else: ..print3;;
		*);;

		-> .proc_of_simply_the_sc_design_contour_subdividing_A13A (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _arc;;
			=> nrel_goto: .proc_of_simply_the_sc_design_contour_subdividing_A14;;
		*);;

		-> .proc_of_simply_the_sc_design_contour_subdividing_A14 (*
			<- call;; 
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_of_simply_the_sc_design_kv;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _contour;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _root;;
				-> rrel_3: rrel_fixed: rrel_scp_var: _tree;;
				-> rrel_4: rrel_fixed: rrel_scp_var: _right;;
				-> rrel_5: rrel_fixed: rrel_scp_var: _flag;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=> nrel_goto: .proc_of_simply_the_sc_design_contour_subdividing_A15;;
		*);;

		-> .proc_of_simply_the_sc_design_contour_subdividing_A15 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=> nrel_goto: ..print2;;
		*);;

	    -> ..print2 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Процедура формирования бинарного дерева. Выход];;
			=> nrel_goto: .proc_of_simply_the_sc_design_contour_subdividing_return;;
		*);;

		-> ..print3 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Процедура формирования бинарного дерева завершена с ошибкой];;
			=> nrel_goto: .proc_of_simply_the_sc_design_contour_subdividing_return;;
		*);;

		-> .proc_of_simply_the_sc_design_contour_subdividing_return (*
			<- return;;
		*);;
	*);;
*);;