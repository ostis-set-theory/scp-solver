scp_program -> proc_of_simply_the_sc_design_search_kvazibinary (*	
	
	-> rrel_params: ...(*

// ВХОДНЫЕ ПАР-РЫ ИЗМЕНЕНЫ 

		// состояние
		-> rrel_1: rrel_in: _state;;
		// исходный контур
		-> rrel_2: rrel_in: _contour;;
		// утверждение
		-> rrel_3: rrel_out: rrel_assign: rrel_scp_var: _stat;;
		// преобразованный контур
		-> rrel_4: rrel_out: rrel_assign: rrel_scp_var: _new_contour;;
	*);;

	-> rrel_operators: ...(*
		
		-> rrel_init: ..print1 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Процедура преобразования контура. Вход];;
			=> nrel_goto: ..proc_1;;
	   	*);;

	   	-> ..proc_1 (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _new_contour;;
			=> nrel_goto: ..proc_2;;
		*);;

	   	// копируем контур
		-> ..proc_2 (*
			<- searchSetStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _contour;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _els;;
			-> rrel_set_3: rrel_fixed: rrel_scp_var: _new_contour;;
			=> nrel_goto: ..proc_3;;
		*);;

		// множество сущностей которые нужно удалить в контуре new_contour
		-> ..proc_3 (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _delete_entity;;
			=> nrel_goto: ..proc_4;;
		*);;

		// множество связок биекций new_contour с правой частью найденного правила
		-> ..proc_4 (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _bijection;;
			=> nrel_goto: ..print_true;;
		*);;

// ###### КВАЗИБИНАРНОЕ ОТНОШЕНИЕ ######
		// череда проверок

//// ======== ОШИБКА ЗДЕСЬ =======
		// ищем квазибинарные отношения вида
		//
		// <- - - -	-			 ^
		//			|	  		 |
		//			| = = = = = =>
		//			|	  ^
		// <- - - - -	  ||
		//				  ||
		//				  ||
		//

		-> ..print_true (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [ВЫПОЛНЕНО УСПЕШНО !!!!];;
			=> nrel_goto: ..proc_4_1;;
		*);;
		
		-> ..proc_4_1 (*
			<- searchSetStr5;;
			-> rrel_1: rrel_assign: rrel_scp_var: _rule_ligament;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_common: rrel_var: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: rrel_node: _root;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;			
			-> rrel_5: rrel_fixed: rrel_scp_var: _new_contour;;
			
			-> rrel_set_2: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _set_of_ligaments_of_quasibinary_relations_in_the_loop;;
			
			=> nrel_then: ..proc_4_2;;
			=> nrel_else: ..proc_4_5;;
		*);;

		-> ..proc_4_2 (*
			<- searchElStr5;;
			-> rrel_1: rrel_assign: rrel_scp_var: _rule_ligament;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_common: rrel_var: _rule_common;;
			-> rrel_3: rrel_assign: rrel_scp_var: _root;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;	
			-> rrel_5: rrel_fixed: rrel_scp_var: _set_of_ligaments_of_quasibinary_relations_in_the_loop;;			
			=> nrel_then: ..proc_4_3;;
			=> nrel_else: ..print3;;
		*);;

		-> ..proc_4_3 (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc2;;
			=> nrel_goto: ..proc_4_4;;
		*);;

		-> ..proc_4_4 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _root;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos: rrel_var: rrel_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _remembered_X;;
			=> nrel_then: ..proc_5_1;;
			=> nrel_else: ..proc_4_2;;		
		*);;
// ==================================================

		// ищем квазибинарную связку и добавляем, что нужно удалить
		-> ..proc_5_1 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _delete_entity;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _rule_ligament;;
			=> nrel_goto: ..proc_5_2;;
		*);;

		-> ..proc_5_2 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _delete_entity;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _rule_common;;
			=> nrel_goto: ..proc_6;;
		*);;

		-> ..print4 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Ошибка. Бинарная связка не найдена];;
			=> nrel_goto: ..print3;;
		*);;

		// находим узел отношения
		-> ..proc_6 (*
			<- searchSetStr3;;			
			-> rrel_1: rrel_assign: rrel_scp_var: _nrel;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos: rrel_var: rrel_perm: _arc2;;			
			-> rrel_3: rrel_fixed: rrel_scp_var: _arc;;
			
			-> rrel_set_2: rrel_fixed: rrel_scp_var: _delete_entity;;
			
			=> nrel_then: ..proc_7;;
			=> nrel_else: ..print5;;
		*);;

		-> ..print5 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Ошибка. Отношение не найдено];;
			=> nrel_goto: ..print3;;
		*);;

		-> ..proc_7 (*
			<- searchSetStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _rule_ligament;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos: rrel_var: rrel_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _els;;

			-> rrel_set_2: rrel_fixed: rrel_scp_var: _delete_entity;;
			// элементы А и Б
			-> rrel_set_3: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _remember_A_and_B;;
			
			=> nrel_then: ..proc_8;;
			=> nrel_else: ..print6;;
		*);;

		-> ..print6 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Ошибка. Элементы в квазибинарном отношении не найдены];;
			=> nrel_goto: ..print3;;
		*);;
// #####################################
// вспоминаем A, B - путем нахождения 
		-> ..proc_8 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _remember_A_and_B;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _remembered_A;;
			=> nrel_goto: ..proc_9;;
		*);;

		-> ..proc_9 (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
			=> nrel_goto: ..proc_10;;
		*);;

		-> ..proc_10 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _remember_A_and_B;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _remembered_B;;
			=> nrel_goto: ..proc_11;;
		*);;

		-> ..proc_11 (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
			=> nrel_goto: ..proc_13;;
		*);;
// ======================================>
		// множество контуров (если) правил

				// левые части правил
		-> ..proc_13 (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _left_part_of_the_rules;;
			=> nrel_goto: ..proc_14;;
		*);;

				// формируем все контура левых частей правил в одно множество
		-> ..proc_14 (*
			<- searchSetStr3;;
			-> rrel_1: rrel_assign: rrel_scp_var: _contours;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _nrel;;

			-> rrel_set_1: rrel_fixed: rrel_scp_var: _left_part_of_the_rules;;
			
			=> nrel_goto: ..proc_15;;
		*);;

				// удаляем принадлежность исходного контура
		-> ..proc_15 (*
			<- eraseElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _left_part_of_the_rules;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_erase: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _contour;;		
			=> nrel_goto: ..proc_16;;
		*);;

				// удаляем принадлежность нового контура 
		-> ..proc_16 (*
			<- eraseElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _left_part_of_the_rules;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_erase: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _new_contour;;		
			=> nrel_goto: ..proc_17;;
		*);;

// ВНИМАНИЕ. Предполагается что с таким отношением будет один контур
		-> ..proc_17 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _left_part_of_the_rules;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _the_left_side_of_the_rule_loop;;
			=> nrel_then: ..proc_18;;
			=> nrel_else: ..print5;;
		*);;

		-> ..proc_18 (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
			=> nrel_goto: ..proc_19;;
		*);;

		-> ..proc_19 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_const: atomic_existence;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _the_left_side_of_the_rule_loop;;
			=> nrel_then: ..proc_20;;
			=> nrel_else: ..proc_17;;
		*);;

// ====> находим элементы в контуре правила
		// C
		-> ..proc_20 (*
			<- searchElStr5;;
			-> rrel_1: rrel_assign: rrel_scp_var: _ligament_left_side_of_the_rule;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_common: rrel_var: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _C;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_var: _the_left_side_of_the_rule_loop;;			
			=> nrel_then: ..proc_21;;
			=> nrel_else: ..proc_17;;
		*);;

		// сохраняем А, В в правиле
		-> ..proc_21 (*
			<- searchSetStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _ligament_left_side_of_the_rule;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos: rrel_var: rrel_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _els;;

			-> rrel_set_3: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _elements_in_the_left_side_of_the_rule;;

			=> nrel_goto: ..proc_22;;
		*);;

		// A
		-> ..proc_22 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _elements_in_the_left_side_of_the_rule;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _A;;
			=> nrel_goto: ..proc_23;;
		*);;

		-> ..proc_23 (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
			=> nrel_goto: ..proc_24;;
		*);;

		// B
		-> ..proc_24 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _elements_in_the_left_side_of_the_rule;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _B;;
			=> nrel_goto: ..proc_25;;
		*);;

		-> ..proc_25 (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
			=> nrel_goto: ..proc_26;;
		*);;

		// x
		-> ..proc_26 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _C;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos: rrel_var: rrel_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _x;;
			=> nrel_goto: ..proc_27;;
		*);;
// <====
		-> ..proc_27 (*
			<- varAssign;;
			-> rrel_1: rrel_assign: rrel_scp_var: _nrel_bijection;;
			-> rrel_2: rrel_fixed: rrel_scp_const: nrel_bijection;;
			=> nrel_goto: ..proc_28;;
		*);;

		-> ..proc_28 (*
			<- call;; 
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_to_create_a_non_oriented_cords;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				// в контуре
				-> rrel_1: rrel_fixed: rrel_scp_var: _remembered_A;;
				// в найденном правиле
				-> rrel_2: rrel_fixed: rrel_scp_var: _A;;
				// отношение биекции
				-> rrel_3: rrel_fixed: rrel_scp_var: _nrel_bijection;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=> nrel_goto: ..proc_29;;
		*);;

		-> ..proc_29 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: ..proc_30;;
		*);;

		-> ..proc_30 (*
			<- call;; 
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_to_create_a_non_oriented_cords;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _remembered_B;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _B;;
				-> rrel_3: rrel_fixed: rrel_scp_var: _nrel_bijection;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=> nrel_goto: ..proc_31;;
		*);;

		-> ..proc_31 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: ..proc_32;;
		*);;

		-> ..proc_32 (*
			<- call;; 
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_to_create_a_non_oriented_cords;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _remembered_X;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _x;;
				-> rrel_3: rrel_fixed: rrel_scp_var: _nrel_bijection;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=> nrel_goto: ..proc_33;;
		*);;

		-> ..proc_33 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: ..proc_34;;
		*);;

// ############### от левой части переходим к правой ###############
		-> ..proc_34 (*
			<- searchSetStr3;;
			-> rrel_1: rrel_assign: rrel_scp_var: _rule_ligament;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _the_left_side_of_the_rule_loop;;
			
			-> rrel_set_1: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _rules_ligaments;;

			=> nrel_then: ..proc_35;;
			=> nrel_else: ..print6;;
		*);;

		-> ..proc_35 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _rules_ligaments;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _rule_ligament;;
			=> nrel_then: ..proc_36;;
			=> nrel_else: ..print3;;
		*);;

		-> ..proc_36 (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _arc;;
			=> nrel_goto: ..proc_37;;
		*);;

		-> ..proc_37 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_const: nrel_equivalence;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _rule_ligament;;
			=> nrel_then: ..proc_38;;
			=> nrel_else: ..proc_37_1;;
		*);;

		-> ..proc_37_1 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_const: nrel_implication;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _rule_ligament;;
			=> nrel_then: ..proc_35;;
			=> nrel_else: ..print3;;
		*);;

		-> ..proc_38 (*
			<- searchSetStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _rule_ligament;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _contours;;

			-> rrel_set_3: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _contours_rule;;

			=> nrel_goto: ..proc_39;;
		*);;

		-> ..print6 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Извините. На данный момент связка импликации не обрабатывается];;
			=> nrel_goto: ..print3;;
		*);;

		// удаляем принадлежность левого контура, остается только правый
		-> ..proc_39 (*
			<- eraseElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _contours_rule;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_erase: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _the_left_side_of_the_rule_loop;;		
			=> nrel_goto: ..proc_40;;
		*);;

		// нашли правую часть правила вывода
		-> ..proc_40 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _contours_rule;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _the_right_side_of_the_rule_loop;;
			=> nrel_then: ..proc_40_1;;
			=> nrel_else: ..print7;;
		*);;

		-> ..proc_40_1 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_const: atomic_existence;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _the_right_side_of_the_rule_loop;;
			=> nrel_then: ..proc_41;;
			=> nrel_else: ..proc_40_2;;
		*);;

/// ЕСЛИ ДИЗЪЮНКЦИЯ, ТО ВЫЗЫВАЕМ ПРОЦЕДУРУ ПРЕОБРАЗОВАНИЯ
		-> ..proc_40_2 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_const: nrel_disjunction;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _the_right_side_of_the_rule_loop;;
			=> nrel_then: ..proc_40_3;;
			=> nrel_else: ..print7;;
		*);;

		-> ..print7 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Ошибка. Неверное правило];;
			=> nrel_goto: ..print3;;
		*);;

// =============================================>
// поиск утверждения
//	
		// проверяем, есть ли утверждение
		-> ..proc_41 (*
			<- searchElStr5;;
			-> rrel_1: rrel_assign: rrel_scp_var: _stat;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _rule_ligament;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_main_key_sc_element;;			
			=> nrel_then: ..proc_42;;
			=> nrel_else: ..proc_43;;
		*);;

		-> ..proc_43 (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _stat;;
			=> nrel_goto: ..proc_42;;
		*);;
//
//
// <==============================================
// создание биекций для дуг принадлежности
//		set_of_arcs_supplies_right_hand_side -- множество дуг принадлежности правой части правила
		-> ..proc_42 (*
			<- searchSetStr5;;
			-> rrel_1: rrel_assign: rrel_scp_var: _element1_right_hand_side;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos: rrel_var: rrel_perm: _accessories_arc_in_right_hand_side;;
			-> rrel_3: rrel_assign: rrel_scp_var: _element2_right_hand_side;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_var: _the_right_side_of_the_rule_loop;;

			-> rrel_set_2: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _set_of_arcs_supplies_right_hand_side;;

			=> nrel_goto: ..proc_43;;
		*);;

		-> ..proc_43 (*
			<- searchElStr5;;
			-> rrel_1: rrel_assign: rrel_scp_var: _element1_right_hand_side;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos: rrel_var: rrel_perm: _accessories_arc_in_right_hand_side;;
			-> rrel_3: rrel_assign: rrel_scp_var: _element2_right_hand_side;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_var: _set_of_arcs_supplies_right_hand_side;;
			=> nrel_then: ..proc_44;;
			=> nrel_else: ..proc_47;;		
		*);;

		-> ..proc_44 (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc2;;
			=> nrel_goto: ..proc_45;;
		*);;

		-> ..proc_45 (*
			<- call;; 
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_of_simply_the_sc_design_generate_bijection;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _state;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _element1_right_hand_side;;
				-> rrel_3: rrel_fixed: rrel_scp_var: _element2_right_hand_side;;
				-> rrel_4: rrel_fixed: rrel_scp_var: _accessories_arc_in_right_hand_side;;
				-> rrel_5: rrel_fixed: rrel_scp_var: _nrel_bijection;;			
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=> nrel_goto: ..proc_46;;
		*);;

		-> ..proc_46 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=> nrel_goto: ..proc_43;;
		*);;
// ============================================================
// удаление сущностей в новом контуре
		-> ..proc_47 (*
			<- eraseSetStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _delete_entity;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: rrel_node: rrel_erase: _entity;;
			=> nrel_goto: ..proc_48;;
		*);;

		-> ..proc_48 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _state;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _true;;
			=> nrel_goto: ..print2;;
		*);;

	    -> ..print2 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Процедура преобразования контура. Выход];;
			=> nrel_goto: .proc_of_simply_the_sc_design_search_kvazibinary_return;;
		*);;

		-> ..print3 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Процедура преобразования контура завершена с ошибкой];;
			=> nrel_goto: .proc_of_simply_the_sc_design_search_kvazibinary_return;;
		*);;

		-> .proc_of_simply_the_sc_design_search_kvazibinary_return (*
			<- return;;
		*);;
	*);;
*);;