scp_program -> proc_strategy_my_test (*
	
	-> rrel_params: ... (*

		// получение доказательства
		// утверждение для которого применяется множество правил
		-> rrel_1: rrel_in: _statement;;

		// множество правил
		-> rrel_2: rrel_in: _set_rules;;
		
		// доказательсво получено или нет
		//-> rrel_3: rrel_out: rrel_assign: rrel_scp_var: _state;;
	*);;

	-> rrel_operators: ...(*

		-> rrel_init: ..print1 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Доказательство тождеств. Вход];;
			=> nrel_goto: .proc_strategy_my_test_1;;
	   	*);;

		// исключенное множество правил
		-> .proc_strategy_my_test_1 (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _delete_rules;;
			=> nrel_goto: .proc_strategy_my_test_2;;
		*);;

		// множество всех правил
		-> .proc_strategy_my_test_2 (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _set_rules_new;;
			=> nrel_goto: .proc_strategy_my_test_2A;;
		*);;

		-> .proc_strategy_my_test_2A (*
			<- varAssign;;
			-> rrel_1: rrel_assign: rrel_scp_var: _current_statement;;
			-> rrel_2: rrel_fixed: rrel_scp_var: _statement;;
			=> nrel_goto: .proc_strategy_my_test_3;;
		*);;

// =====================================================================
// НАЧАЛО ИТЕРАЦИЙ
		// формируем множество всех правил
		-> .proc_strategy_my_test_3 (*
			<- searchSetStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _set_rules;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arcs;;
			-> rrel_3: rrel_assign: rrel_scp_var: _rules;;

				-> rrel_set_3: rrel_fixed: rrel_scp_var: _set_rules_new;;

			=> nrel_goto: .proc_strategy_my_test_4;;
		*);;

		// находим исключенное правило
		-> .proc_strategy_my_test_4 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _delete_rules;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _delete_rule;;
			=> nrel_then: .proc_strategy_my_test_5A;;
			=> nrel_else: .proc_strategy_my_test_7B;;
		*);;

		-> .proc_strategy_my_test_5A (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Сюда зашли];;
			=> nrel_goto: .proc_strategy_my_test_5B;;
		*);;

		-> .proc_strategy_my_test_5B (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _arc;;
			=> nrel_goto: .proc_strategy_my_test_6A;;
		*);;

		-> .proc_strategy_my_test_6A (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _set_rules_new;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _delete_rule;;
			=> nrel_goto: .proc_strategy_my_test_6B;;
		*);;

		-> .proc_strategy_my_test_6B (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _arc;;
			=> nrel_goto: .proc_strategy_my_test_4;;
		*);;


// =====================================
		// перебираем оставшиеся правила
		// находим текущее правило
		-> .proc_strategy_my_test_7B (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Множество правил применяемых для утверждения:];;
			=> nrel_goto: .proc_strategy_my_test_7A;;
		*);;

		-> .proc_strategy_my_test_7A (*
			<- printEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _set_rules_new;;
			=> nrel_goto: .proc_strategy_my_test_7;;
		*);;

		-> .proc_strategy_my_test_7 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _set_rules_new;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _rule;;
			=> nrel_then: .proc_strategy_my_test_8;;
			=> nrel_else: ..print4;;
		*);;

		-> .proc_strategy_my_test_8 (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _arc;;
			=> nrel_goto: .proc_strategy_my_test_9A;;
		*);;

		-> .proc_strategy_my_test_9A (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_print_system_idtf;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _rule;;	
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=> nrel_goto: .proc_strategy_my_test_9B;;
		*);;

		-> .proc_strategy_my_test_9B (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=> nrel_goto: .proc_strategy_my_test_9;;
		*);;

		// получаем множество утверждений, если таковые найдены
		-> .proc_strategy_my_test_9 (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_test_apply_rule_all;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _current_statement;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _rule;;		
				-> rrel_3: rrel_assign: rrel_scp_var: _set_statement;;	
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_10;;
		*);;

		-> .proc_strategy_my_test_10 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_11_fuweihwu;;
		*);;

		-> .proc_strategy_my_test_11_fuweihwu (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [ВЫПОЛНЕНО];;
			=> nrel_goto: .proc_strategy_my_test_11_fuweihwuwu;;
		*);;

		-> .proc_strategy_my_test_11_fuweihwuwu (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [ВЫПОЛНЕНО 2];;
			=> nrel_goto: .proc_strategy_my_test_11;;
		*);;

		// если вывод получен, то при следующей итерации
		// исключаем правило
		-> .proc_strategy_my_test_11 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _set_statement;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _statement_new;;
			=> nrel_then: .proc_strategy_my_test_12;;
			=> nrel_else: .proc_strategy_my_test_7;;
		*);;

// ===================================================
		/*// преобразуем полученное утверждение в контур
		-> .proc_strategy_my_test_12A (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _el_contour;;
			=> nrel_goto: .proc_strategy_my_test_12B;;
		*);;

		// находим корень
		-> .proc_strategy_my_test_12B (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_search_root_binary;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _statement_new;;
				-> rrel_2: rrel_assign: rrel_scp_var: _root;;		
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_12C;;
		*);;

		-> .proc_strategy_my_test_12C (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_12D;;
		*);;

		-> .proc_strategy_my_test_12D (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_binary_tree_to_contour;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _root;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _el_contour;;		
				-> rrel_3: rrel_assign: rrel_scp_var: _result;;	
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_12E;;
		*);;

		-> .proc_strategy_my_test_12E (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_12;;
		*);;*/
// ===============================================================

		-> .proc_strategy_my_test_12 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _delete_rules;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _rule;;
			=> nrel_goto: .proc_strategy_my_test_13;;
		*);;

		-> .proc_strategy_my_test_13 (*
			<- eraseSetStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _set_rules_new;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_erase: _arcs;;
			-> rrel_3: rrel_assign: rrel_scp_var: _cur_rules;;
			=> nrel_goto: .proc_strategy_my_test_14;;
		*);;

		-> .proc_strategy_my_test_14 (*
			<- varAssign;;
			-> rrel_1: rrel_assign: rrel_scp_var: _current_statement;;
			-> rrel_2: rrel_fixed: rrel_scp_var: _statement_new;;
			=> nrel_goto: .proc_strategy_my_test_3;;
		*);;

		-> ..print2 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Тождество истинно];;
			=> nrel_goto: .proc_strategy_my_test_return;;
	   	*);;

	   	-> ..print3 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Тождество ложно];;
			=> nrel_goto: .proc_strategy_my_test_return;;
	   	*);;

	   	-> ..print4 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Ошибка ! Правил не обнаружено];;
			=> nrel_goto: .proc_strategy_my_test_return;;
	   	*);;

		-> .proc_strategy_my_test_return (*
			<- return;;
		*);;
	*);;
*);;