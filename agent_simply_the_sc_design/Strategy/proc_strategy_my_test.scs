scp_program -> proc_strategy_my_test (*
	
	-> rrel_params: ... (*

		// получение доказательства
		// утверждение для которого применяется множество правил
		-> rrel_1: rrel_in: _statement;;

		// множество правил
		-> rrel_2: rrel_in: _set_rules;;
		
		-> rrel_3: rrel_out: rrel_assign: rrel_scp_var: _statement_new6;;
	*);;

	-> rrel_operators: ...(*

		-> rrel_init: ..print1 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Доказательство тождеств. Вход];;
			=> nrel_goto: .proc_strategy_my_test_1;;
	   	*);;

		-> .proc_strategy_my_test_1 (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_test_apply_rule_all;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _statement;;
				-> rrel_2: rrel_fixed: rrel_scp_const: rule_intersection;;		
				-> rrel_3: rrel_assign: rrel_scp_var: _set_statement1;;	
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_2;;
		*);;

		-> .proc_strategy_my_test_2 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_3;;
		*);;

		-> .proc_strategy_my_test_3 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _set_statement1;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _statement_new1;;
			=> nrel_goto: .proc_strategy_my_test_4;;
		*);;

		-> .proc_strategy_my_test_4 (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_search_root_binary;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _statement_new1;;
				-> rrel_2: rrel_assign: rrel_scp_var: _root1;;		
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_5;;
		*);;

		-> .proc_strategy_my_test_5 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_7;;
		*);;

		-> .proc_strategy_my_test_7 (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_binary_tree_to_contour;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _root1;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _set_statement1;;		
				-> rrel_3: rrel_assign: rrel_scp_var: _element_generated;;	
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_8;;
		*);;

		-> .proc_strategy_my_test_8 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_1A;;
		*);;

		-> .proc_strategy_my_test_1A (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_test_apply_rule_all;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _statement_new1;;
				-> rrel_2: rrel_fixed: rrel_scp_const: rule_combination;;		
				-> rrel_3: rrel_assign: rrel_scp_var: _set_statement2;;	
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_2A;;
		*);;

		-> .proc_strategy_my_test_2A (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_3A;;
		*);;

		-> .proc_strategy_my_test_3A (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _set_statement2;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _statement_new2;;
			=> nrel_goto: .proc_strategy_my_test_4A;;
		*);;

		-> .proc_strategy_my_test_4A (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_search_root_binary;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _statement_new2;;
				-> rrel_2: rrel_assign: rrel_scp_var: _root2;;		
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_5A;;
		*);;

		-> .proc_strategy_my_test_5A (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_7A;;
		*);;

		-> .proc_strategy_my_test_7A (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_binary_tree_to_contour;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _root2;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _set_statement2;;		
				-> rrel_3: rrel_assign: rrel_scp_var: _element_generated2;;	
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_8A;;
		*);;

		-> .proc_strategy_my_test_8A (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_1B;;
		*);;

		-> .proc_strategy_my_test_1B (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_test_apply_rule_all;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _statement_new2;;
				-> rrel_2: rrel_fixed: rrel_scp_const: rule_conjunction;;		
				-> rrel_3: rrel_assign: rrel_scp_var: _set_statement3;;	
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_2B;;
		*);;

		-> .proc_strategy_my_test_2B (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_3B;;
		*);;

		-> .proc_strategy_my_test_3B (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _set_statement3;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _statement_new3;;
			=> nrel_goto: .proc_strategy_my_test_4B;;
			//=> nrel_goto: ..print2;;
		*);;

		-> .proc_strategy_my_test_4B (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_search_root_binary;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _statement_new3;;
				-> rrel_2: rrel_assign: rrel_scp_var: _root3;;		
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_5B;;
		*);;

		-> .proc_strategy_my_test_5B (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_7B;;
		*);;

		-> .proc_strategy_my_test_7B (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_binary_tree_to_contour;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _root3;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _set_statement3;;		
				-> rrel_3: rrel_assign: rrel_scp_var: _element_generated3;;	
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_8B;;
		*);;

		-> .proc_strategy_my_test_8B (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_1C;;
		*);;

		-> .proc_strategy_my_test_1C (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_test_apply_rule_all;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _statement_new3;;
				-> rrel_2: rrel_fixed: rrel_scp_const: rule_intersection;;		
				-> rrel_3: rrel_assign: rrel_scp_var: _set_statement4;;	
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_2C;;
		*);;

		-> .proc_strategy_my_test_2C (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_3C;;
		*);;

		-> .proc_strategy_my_test_3C (* 
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _set_statement4;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _statement_new4;;
			//=> nrel_then: ..print2;;
						=> nrel_then: .proc_strategy_my_test_1D;;
			=> nrel_else: ..print4;;
		*);;

		-> .proc_strategy_my_test_4C (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_search_root_binary;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _statement_new4;;
				-> rrel_2: rrel_assign: rrel_scp_var: _root4;;		
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_5C;;
		*);;

		-> .proc_strategy_my_test_5C (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_7C;;
		*);;

		-> .proc_strategy_my_test_7C (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_binary_tree_to_contour;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _root4;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _set_statement4;;		
				-> rrel_3: rrel_assign: rrel_scp_var: _element_generated4;;	
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_8C;;
		*);;

		-> .proc_strategy_my_test_8C (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_1D;;
		*);;

// ====================================
		-> .proc_strategy_my_test_1D (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_test_apply_rule_all;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _statement_new4;;
				-> rrel_2: rrel_fixed: rrel_scp_const: rule_combination;;		
				-> rrel_3: rrel_assign: rrel_scp_var: _set_statement5;;	
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_2D;;
		*);;

		-> .proc_strategy_my_test_2D (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_3D;;
		*);;

		-> .proc_strategy_my_test_3D (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _set_statement5;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _statement_new5;;
			=> nrel_goto: .proc_strategy_my_test_1E;;
		*);;

		-> .proc_strategy_my_test_1E (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_test_apply_rule_all;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _statement_new5;;
				-> rrel_2: rrel_fixed: rrel_scp_const: rule_intersection;;		
				-> rrel_3: rrel_assign: rrel_scp_var: _set_statement6;;	
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_2E;;
		*);;

		-> .proc_strategy_my_test_2E (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: .proc_strategy_my_test_3E;;
		*);;

		-> .proc_strategy_my_test_3E (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _set_statement6;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _statement_new6;;
			=> nrel_then: ..print2;;
			=> nrel_else: ..print4;;
		*);;
		
		-> ..print2 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Тождество истинно];;
			=> nrel_goto: .proc_strategy_my_test_return;;
	   	*);;

	   	-> ..print3 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Тождество ложно];;
			=> nrel_goto: .proc_strategy_my_test_return;;
	   	*);;

	   	-> ..print4 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Ошибка ! Правил не обнаружено];;
			=> nrel_goto: .proc_strategy_my_test_return;;
	   	*);;

		-> .proc_strategy_my_test_return (*
			<- return;;
		*);;
	*);;
*);;