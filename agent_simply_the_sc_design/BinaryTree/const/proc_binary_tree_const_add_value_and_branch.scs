scp_program -> proc_binary_tree_const_add_value_and_branch (*	
	
	-> rrel_params: ... (*
		
		// неизменяемый входный параметр: отношение ветвь
		-> rrel_1: rrel_in: _nrel_branch;;

		// неизменяемый входный параметр: отношение значение
		-> rrel_2: rrel_in: _nrel_value;;

		// изменяемый входный параметр: контур дерева
		-> rrel_3: rrel_in: _contour;;

		// изменяемый входный параметр: текущий узел дерева
		-> rrel_4: rrel_in: _element;;

		// изменяемый входный параметр: сохраняемое значение
		-> rrel_5: rrel_in: _value;;

		// изменяемый входный параметр: процедура сохранения элемента
		-> rrel_6: rrel_in: _set_value;;
	*);;

	-> rrel_operators: ...(*
		
		-> rrel_init: .proc_binary_tree_const_add_value_and_branch_1 (*
			<- ifType;;
			-> rrel_1: rrel_const: _value;;
			=> nrel_then: .proc_binary_tree_const_add_value_and_branch_2;;
			=> nrel_else: .proc_binary_tree_const_add_value_and_branch_8;;
		*);;

		// случай, когда внутренний узел
		-> .proc_binary_tree_const_add_value_and_branch_2 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _element;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_common: rrel_const: _arc_element_branch;;
			-> rrel_3: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _branch;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc_branch_nrel;;
			-> rrel_5: rrel_fixed: rrel_scp_var: _nrel_branch;;
			=> nrel_goto: .proc_binary_tree_const_add_value_and_branch_3;;
		*);;

		-> .proc_binary_tree_const_add_value_and_branch_3 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _contour;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _arc_element_branch;;
			=> nrel_goto: .proc_binary_tree_const_add_value_and_branch_4;;
		*);;

		-> .proc_binary_tree_const_add_value_and_branch_4 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _contour;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _branch;;
			=> nrel_goto: .proc_binary_tree_const_add_value_and_branch_5;;
		*);;

		-> .proc_binary_tree_const_add_value_and_branch_5 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _contour;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _arc_branch_nrel;;
			=> nrel_goto: .proc_binary_tree_const_add_value_and_branch_6;;
		*);;

		-> .proc_binary_tree_const_add_value_and_branch_6 (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _set_value;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _nrel_value;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _contour;;
				-> rrel_3: rrel_fixed: rrel_scp_var: _branch;;
				-> rrel_4: rrel_fixed: rrel_scp_var: _value;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=> nrel_goto: .proc_binary_tree_const_add_value_and_branch_7;;
		*);;

		-> .proc_binary_tree_const_add_value_and_branch_7 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=> nrel_goto: ..print2;;
		*);;

		// случай, когда пришел лист, т.е. переменная
		-> .proc_binary_tree_const_add_value_and_branch_8 (*
			<- searchElStr5;;
			-> rrel_1: rrel_assign: rrel_scp_var: _branch;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_common: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _value;;
			-> rrel_4: rrel_assign: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_var: _nrel_value;;
			=> nrel_then: .proc_binary_tree_const_add_value_and_branch_9;;
			=> nrel_else: .proc_binary_tree_const_add_value_and_branch_2;;		
		*);;

		-> .proc_binary_tree_const_add_value_and_branch_9 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _element;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_common: rrel_const: _arc_element_branch;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _branch;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc_branch_nrel;;
			-> rrel_5: rrel_fixed: rrel_scp_var: _nrel_branch;;
			=> nrel_goto: .proc_binary_tree_const_add_value_and_branch_10;;
		*);;

		-> .proc_binary_tree_const_add_value_and_branch_10 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _contour;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _arc_element_branch;;
			=> nrel_goto: .proc_binary_tree_const_add_value_and_branch_11;;
		*);;

		-> .proc_binary_tree_const_add_value_and_branch_11 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _contour;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _arc_branch_nrel;;
			=> nrel_goto: ..print2;;
		*);;

	    -> ..print2 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Сохранение значения по ветви];;
			=> nrel_goto: .proc_binary_tree_const_add_value_and_branch_return;;
		*);;

		-> .proc_binary_tree_const_add_value_and_branch_return (*
			<- return;;
		*);;
	*);;
*);;