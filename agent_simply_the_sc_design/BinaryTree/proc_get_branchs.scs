scp_program -> proc_get_branchs (*
	
	-> rrel_params: ...(*
		
		// текущий узел в дереве
		-> rrel_1: rrel_in: _element;;
		
		// тип отношения, если есть элемент, то ориентированное
		-> rrel_2: rrel_out: rrel_assign: rrel_scp_var: _type;;
		
		// левая ветвь бинарного дерева
		-> rrel_3: rrel_out: rrel_assign: rrel_scp_var: _left;;

		// правая ветвь бинарного дерева
		-> rrel_4: rrel_out: rrel_assign: rrel_scp_var: _right;;
	*);;

	-> rrel_operators: ...(*
		
		-> rrel_init: ..print1 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Процедура получения ветвей бинарного дерева. Вход];;
			=> nrel_goto: .proc_get_branchs_2;;
	   	*);;

		-> .proc_get_branchs_2 (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _type;;
			=> nrel_goto: .proc_get_branchs_3;;
		*);;

		// ======================
	   	-> .proc_get_branchs_3 (*
			<- searchElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _element;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_common: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _left;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: nrel_binary_tree_branch_left;;
			=> nrel_then: .proc_get_branchs_4;;
			=> nrel_else: .proc_get_branchs_6;;
		*);;

		-> .proc_get_branchs_4 (*
			<- searchElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _element;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_common: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _right;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: nrel_binary_tree_branch_right;;
			=> nrel_goto: .proc_get_branchs_5;;
		*);;

		-> .proc_get_branchs_5 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _type;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _oriented;;
			=> nrel_goto: .proc_get_branchs_9;;
		*);;

		// ======================
		-> .proc_get_branchs_6 (*
			<- searchSetStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _element;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_common: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _els;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: nrel_binary_tree_branch;;
			
				-> rrel_set_3: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _elements;;

			=> nrel_goto: .proc_get_branchs_7;;
		*);;

		-> .proc_get_branchs_7 (*
			<- eraseElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _elements;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_erase: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _left;;
			=> nrel_goto: .proc_get_branchs_8;;
		*);;

		-> .proc_get_branchs_8 (*
			<- eraseElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _elements;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_erase: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _right;;
			=> nrel_goto: .proc_get_branchs_9;;
		*);;

		-> .proc_get_branchs_9 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _is_search;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _true;;
			=> nrel_then: ..print2;;
		*);;

	    -> ..print2 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Процедура получения отношений бинарного дерева по типу. Выход];;
			=> nrel_goto: .proc_get_branchs_return;;
		*);;

		-> .proc_get_branchs_return (*
			<- return;;
		*);;
	*);;
*);;