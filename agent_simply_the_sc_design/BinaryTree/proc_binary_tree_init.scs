scp_program -> proc_binary_tree_init (*	
	
	-> rrel_params: ...(*
		
		// rrel_1: тип дерева (переменный или контантный)
		-> rrel_1: rrel_in: _in_parameter;;

		/*
		неизменяемые выходные параметры:
		rrel_1: контур дерева
		rrel_2: корень дерева
		rrel_3: набор процедур
			rrel_1: сохранение значения
			rrel_2: описание процедуры:
				создание ветви
				сохранение значения
				возврат ветви
		rrel_4: отношения в дереве
			rrel_1: отношение значения
			rrel_2: отношения только для бинарного дерева
				rrel_1: для левой ветви
				rrel_2: для правой ветви
				rrel_3: для обеих ветвей

		9 выходных параметров
		*/
		-> rrel_2: rrel_out: rrel_assign: rrel_scp_var: _out_not_changing_parameter;;
	*);;

	-> rrel_operators: ...(*
		
		-> rrel_init: ..print1 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Процедура создания бинарного дерева. Вход];;
			=> nrel_goto: .proc_binary_tree_init_1;;
	   	*);;

		// неизменяемые выходные параметры:
		// rrel_1: контур дерева
	   	-> .proc_binary_tree_init_1 (*
			<- genElStr5;;
			-> rrel_1: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _out_not_changing_parameter;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: rrel_node: rrel_const: rrel_struct: _out_1;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_1;;
			=> nrel_goto: .proc_binary_tree_init_3;;
		*);;

		// rrel_3: набор процедур
		-> .proc_binary_tree_init_3 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _out_not_changing_parameter;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _out_3;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_3;;
			=> nrel_goto: .proc_binary_tree_init_3_0;;
		*);;

	   	-> .proc_binary_tree_init_3_0 (*
			<- searchElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _in_parameter;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _type;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_1;;
			=> nrel_then: .proc_binary_tree_init_2A;;
			=> nrel_else: .proc_binary_tree_init_2B;;
		*);;

		// rrel_2: корень дерева константный
		-> .proc_binary_tree_init_2A (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _out_not_changing_parameter;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _out_2;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_2;;
			=> nrel_goto: .proc_binary_tree_init_3_A1;;
		*);;

		-> .proc_binary_tree_init_3_A1 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _out_3;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_const: proc_binary_tree_const_set_value;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_1;;
			=> nrel_goto: .proc_binary_tree_init_3_A2;;
		*);;
		
		-> .proc_binary_tree_init_3_A2 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _out_3;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_const: proc_binary_tree_const_add_value_and_branch;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_2;;
			=> nrel_goto: .proc_binary_tree_init_4;;
		*);;

		// rrel_2: корень дерева переменный
		-> .proc_binary_tree_init_2B (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _out_not_changing_parameter;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: rrel_node: rrel_var: _out_2;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_2;;
			=> nrel_goto: .proc_binary_tree_init_3_B1;;
		*);;

		-> .proc_binary_tree_init_3_B1 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _out_3;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_const: proc_binary_tree_set_value;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_1;;
			=> nrel_goto: .proc_binary_tree_init_3_B2;;
		*);;
		
		-> .proc_binary_tree_init_3_B2 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _out_3;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_const: proc_binary_tree_add_value_and_branch;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_2;;
			=> nrel_goto: .proc_binary_tree_init_4;;
		*);;

		// rrel_4: отношения в дереве
		-> .proc_binary_tree_init_4 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _out_not_changing_parameter;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _out_4;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_4;;
			=> nrel_goto: .proc_binary_tree_init_4_1;;
		*);;

		// отношение значения
		-> .proc_binary_tree_init_4_1 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _out_4;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_const: nrel_tree_value;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_1;;
			=> nrel_goto: .proc_binary_tree_init_4_2;;
		*);;

		// отношения только для бинарного дерева
		-> .proc_binary_tree_init_4_2 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _out_4;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_const: _out_4_2;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_2;;
			=> nrel_goto: .proc_binary_tree_init_4_2_1;;
		*);;

		// для левой ветви
		-> .proc_binary_tree_init_4_2_1 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _out_4_2;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_const: nrel_binary_tree_branch_left;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_1;;
			=> nrel_goto: .proc_binary_tree_init_4_2_2;;
		*);;

		// для правой ветви
		-> .proc_binary_tree_init_4_2_2 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _out_4_2;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_const: nrel_binary_tree_branch_right;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_2;;
			=> nrel_goto: .proc_binary_tree_init_4_2_3;;
		*);;

		// для обеих ветвей
		-> .proc_binary_tree_init_4_2_3 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _out_4_2;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_const: nrel_binary_tree_branch;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_3;;
			=> nrel_goto: .proc_binary_tree_init_A;;
		*);;

		-> .proc_binary_tree_init_A (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _out_1;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _out_2;;
			=> nrel_goto: ..print2;;
		*);;

	    -> ..print2 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Процедура создания бинарного дерева. Выход];;
			=> nrel_goto: .proc_binary_tree_init_return;;
		*);;

		-> .proc_binary_tree_init_return (*
			<- return;;
		*);;
	*);;
*);;