scp_program -> proc_of_simply_the_sc_design_step_proof (*	
	
	-> rrel_params: ...(*
		-> rrel_1: rrel_in: _state;;
		-> rrel_2: rrel_in: _root;;
		-> rrel_3: rrel_in: _contour;;
		-> rrel_4: rrel_out: rrel_assign: rrel_scp_var: _contour2;;
		-> rrel_5: rrel_in: _sc_action;;
		-> rrel_6: rrel_in: _set_sc_actions;;
		-> rrel_7: rrel_out: rrel_assign: rrel_scp_var: _sc_action_next;;				
	*);;

	-> rrel_operators: ...(*
		
		-> rrel_init: ..print1 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Процедура выполнения шага доказательства. Вход];;
			=> nrel_goto: .proc_of_simply_the_sc_design_step_proof_1;;
	   	*);;

	   	-> .proc_of_simply_the_sc_design_step_proof_1 (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_of_simply_the_sc_design_search_kvazibinary;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _state;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _root;;
				-> rrel_3: rrel_fixed: rrel_scp_var: _contour;;
				-> rrel_4: rrel_assign: rrel_scp_var: _contour2;;
				-> rrel_5: rrel_assign: rrel_scp_var: _stat;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=> nrel_goto: .proc_of_simply_the_sc_design_step_proof_2;;
		*);;

		-> .proc_of_simply_the_sc_design_step_proof_2 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=> nrel_goto: .proc_of_simply_the_sc_design_step_proof_3;;
		*);;

		-> .proc_of_simply_the_sc_design_step_proof_3 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _state;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _true;;
			=> nrel_then: .proc_of_simply_the_sc_design_step_proof_4;;
			=> nrel_else: .proc_of_simply_the_sc_design_step_proof_gen;;
		*);;

		-> .proc_of_simply_the_sc_design_step_proof_gen (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _sc_action_next;;
			=> nrel_goto: ..print3;;
		*);;

		// добавление полученного контура в шаг доказательсва
		-> .proc_of_simply_the_sc_design_step_proof_4 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _sc_action;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_common: rrel_const: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _sc_action_next;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: nrel_sequence_of_actions;;
			=> nrel_goto: .proc_of_simply_the_sc_design_step_proof_5;;
		*);;

		-> .proc_of_simply_the_sc_design_step_proof_5 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _sc_action_next;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_common: rrel_const: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _contour2;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: nrel_result;;
			=> nrel_goto: .proc_of_simply_the_sc_design_step_proof_6;;
		*);;

		-> .proc_of_simply_the_sc_design_step_proof_6 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _set_sc_actions;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _sc_action_next;;
			=> nrel_goto: .proc_of_simply_the_sc_design_step_proof_7;;
		*);;

		-> .proc_of_simply_the_sc_design_step_proof_7 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_const: successfully_executed_sc_action;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _sc_action_next;;
			=> nrel_goto: .proc_of_simply_the_sc_design_step_proof_8;;
		*);;

		-> .proc_of_simply_the_sc_design_step_proof_8 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_const: logic_sc_action;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _sc_action_next;;
			=> nrel_goto: .proc_of_simply_the_sc_design_step_proof_9;;
		*);;
		
		-> .proc_of_simply_the_sc_design_step_proof_9 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _sc_action_next;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _contour;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_1;;
			=> nrel_goto: .proc_of_simply_the_sc_design_step_proof_10;;
		*);;
		
		-> .proc_of_simply_the_sc_design_step_proof_10 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _sc_action_next;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _stat;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_2;;
			=> nrel_goto: ..print2;;
		*);;

	    -> ..print2 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Процедура выполнения шага доказательства. Выход];;
			=> nrel_goto: .proc_of_simply_the_sc_design_step_proof_return;;
		*);;

		-> ..print3 (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Процедура выполнения шага доказательства завершена с ошибкой];;
			=> nrel_goto: .proc_of_simply_the_sc_design_step_proof_return;;
		*);;

		-> .proc_of_simply_the_sc_design_step_proof_return (*
			<- return;;
		*);;
	*);;
*);;